diff --git a/node_modules/react-native-pell-rich-editor/index.d.ts b/node_modules/react-native-pell-rich-editor/index.d.ts
index e0e0e62..85ef108 100644
--- a/node_modules/react-native-pell-rich-editor/index.d.ts
+++ b/node_modules/react-native-pell-rich-editor/index.d.ts
@@ -103,6 +103,7 @@ export interface RichEditorProps extends WebViewProps {
 
     onMessage?: (message: {type: string; id: string; data?: any}) => void;
 
+    snapFullShot: ()=>void;
     /**
      * When first gaining focus, the cursor moves to the end of the text
      * Default is true
@@ -171,6 +172,7 @@ export class RichEditor extends React.Component<RichEditorProps> {
     insertText: (text: string) => void;
 
     insertHTML: (html: string) => void;
+    scrollMore: (number:offset) => void;
 
     /**
      * $ = document.querySelector
diff --git a/node_modules/react-native-pell-rich-editor/src/RichEditor.js b/node_modules/react-native-pell-rich-editor/src/RichEditor.js
index 806668b..5549ea7 100755
--- a/node_modules/react-native-pell-rich-editor/src/RichEditor.js
+++ b/node_modules/react-native-pell-rich-editor/src/RichEditor.js
@@ -1,8 +1,8 @@
-import React, {Component} from 'react';
-import {WebView} from 'react-native-webview';
-import {actions, messages} from './const';
-import {Dimensions, Keyboard, Platform, StyleSheet, TextInput, View} from 'react-native';
-import {createHTML} from './editor';
+import React, { Component } from 'react';
+import { WebView } from 'react-native-webview';
+import { actions, messages } from './const';
+import { Dimensions, Keyboard, Platform, StyleSheet, TextInput, View } from 'react-native';
+import { createHTML } from './editor';
 
 const PlatformIOS = Platform.OS === 'ios';
 
@@ -31,7 +31,7 @@ export default class RichTextEditor extends Component {
         pasteAsPlainText: false,
         autoCapitalize: 'off',
         defaultParagraphSeparator: 'div',
-        editorInitializedCallback: () => {},
+        editorInitializedCallback: () => { },
     };
 
     constructor(props) {
@@ -49,7 +49,7 @@ export default class RichTextEditor extends Component {
         this._focus = false;
         that.selectionChangeListeners = [];
         const {
-            editorStyle: {backgroundColor, color, placeholderColor, cssText, contentCSSText} = {},
+            editorStyle: { backgroundColor, color, placeholderColor, cssText, contentCSSText } = {},
             html,
             pasteAsPlainText,
             onPaste,
@@ -135,6 +135,7 @@ export default class RichTextEditor extends Component {
             const props = this.props;
             const message = JSON.parse(event.nativeEvent.data);
             const data = message.data;
+            console.log(data)
             switch (message.type) {
                 case messages.CONTENT_HTML_RESPONSE:
                     if (this.contentResolve) {
@@ -187,6 +188,9 @@ export default class RichTextEditor extends Component {
                 case messages.OFFSET_HEIGHT:
                     this.setWebHeight(data);
                     break;
+                case messages.SNAP_FULL:
+                    props.onSnapFull && props.onSnapFull(message);
+                    break;
                 default:
                     props.onMessage && props.onMessage(message);
                     break;
@@ -198,12 +202,15 @@ export default class RichTextEditor extends Component {
 
     setWebHeight = (height) => {
         // console.log(height);
-        const {onHeightChange, useContainer} = this.props;
+        const { onHeightChange, useContainer } = this.props;
         if (height !== this.state.height) {
-            useContainer && this.setState({height});
+            useContainer && this.setState({ height });
             onHeightChange && onHeightChange(height);
         }
     };
+    snapFullShot() {
+        this.webviewBridge.goBack();
+    }
 
     /**
      * @param {String} type
@@ -213,14 +220,14 @@ export default class RichTextEditor extends Component {
      * @private
      */
     sendAction(type, action, data, options) {
-        let jsonString = JSON.stringify({type, name: action, data, options});
+        let jsonString = JSON.stringify({ type, name: action, data, options });
         if (this.webviewBridge) {
             this.webviewBridge.postMessage(jsonString);
         }
     }
 
     componentDidUpdate(prevProps, prevState, snapshot) {
-        const {editorStyle, disabled} = this.props;
+        const { editorStyle, disabled } = this.props;
         if (prevProps.editorStyle !== editorStyle) {
             editorStyle && this.setContentStyle(editorStyle);
         }
@@ -235,15 +242,15 @@ export default class RichTextEditor extends Component {
 
     renderWebView() {
         let that = this;
-        const {html, editorStyle, useContainer, ...rest} = that.props;
-        const {html: viewHTML} = that.state;
+        const { html, editorStyle, useContainer, ...rest } = that.props;
+        const { html: viewHTML } = that.state;
         // webview dark theme bug
         const opacity = that.state.isInit ? 1 : 0;
         return (
             <>
                 <WebView
                     useWebKit={true}
-                    scrollEnabled={false}
+                    scrollEnabled={true}
                     hideKeyboardAccessoryView={true}
                     keyboardDisplayRequiresUserAction={false}
                     {...rest}
@@ -264,17 +271,17 @@ export default class RichTextEditor extends Component {
     }
 
     render() {
-        let {height} = this.state;
+        let { height } = this.state;
 
         // useContainer is an optional prop with default value of true
         // If set to true, it will use a View wrapper with styles and height.
         // If set to false, it will not use a View wrapper
-        const {useContainer, style, initialHeight = 0} = this.props;
+        const { useContainer, style, initialHeight = 0 } = this.props;
         return useContainer ? (
-            <View style={[style, {height: height || initialHeight}]}>{this.renderWebView()}</View>
+            <View style={[style, { height: height || initialHeight }]}>{this.renderWebView()}</View>
         ) : (
-            this.renderWebView()
-        );
+                this.renderWebView()
+            );
     }
 
     //-------------------------------------------------------------------------------
@@ -357,10 +364,26 @@ export default class RichTextEditor extends Component {
     insertLink(title, url) {
         if (url) {
             this.showAndroidKeyboard();
-            this.sendAction(actions.insertLink, 'result', {title, url});
+            this.sendAction(actions.insertLink, 'result', { title, url });
         }
     }
 
+    setFontColor(color) {
+        this.sendAction(actions.setColor, 'result', color);
+    }
+
+    setFontBold() {
+        this.sendAction(actions.setBold, 'result');
+    }
+
+    setItalic() {
+        this.sendAction(actions.setItalic, 'result');
+    }
+
+    scrollMore(offset) {
+        this.sendAction(actions.scrollMore, 'result', offset);
+    }
+
     commandDOM(command) {
         if (command) {
             this.sendAction(actions.content, 'commandDOM', command);
@@ -383,7 +406,7 @@ export default class RichTextEditor extends Component {
 
     init() {
         let that = this;
-        const {initialFocus, initialContentHTML, placeholder, editorInitializedCallback, disabled} = that.props;
+        const { initialFocus, initialContentHTML, placeholder, editorInitializedCallback, disabled } = that.props;
         initialContentHTML && that.setContentHTML(initialContentHTML);
         placeholder && that.setPlaceholder(placeholder);
         that.setDisable(disabled);
@@ -393,7 +416,7 @@ export default class RichTextEditor extends Component {
         initialFocus && !disabled && that.focusContentEditor();
         // no visible ?
         that.sendAction(actions.init);
-        that.setState({isInit: true});
+        that.setState({ isInit: true });
     }
 
     /**
diff --git a/node_modules/react-native-pell-rich-editor/src/RichToolbar.js b/node_modules/react-native-pell-rich-editor/src/RichToolbar.js
index 730e012..fbb80af 100755
--- a/node_modules/react-native-pell-rich-editor/src/RichToolbar.js
+++ b/node_modules/react-native-pell-rich-editor/src/RichToolbar.js
@@ -1,18 +1,23 @@
-import React, {Component} from 'react';
-import {FlatList, Image, StyleSheet, TouchableOpacity, View} from 'react-native';
-import {actions} from './const';
+import React, { Component } from 'react';
+import { FlatList, Image, StyleSheet, TouchableOpacity, View } from 'react-native';
+import { actions } from './const';
 
 export const defaultActions = [
     actions.keyboard,
-    actions.insertImage,
-    actions.setBold,
-    actions.setItalic,
+    // actions.insertImage,
+    // actions.setBold,
+    // actions.setItalic,
     actions.setUnderline,
-    actions.removeFormat,
+    // actions.removeFormat,
     actions.insertBulletsList,
     actions.indent,
     actions.outdent,
     actions.insertLink,
+    actions.insertOrderedList,
+    actions.undo,
+    actions.alignLeft,
+    actions.alignCenter,
+    actions.alignRight,
 ];
 
 function getDefaultIcon() {
@@ -20,8 +25,8 @@ function getDefaultIcon() {
     // new icon styles of experiment
     texts[actions.insertImage] = require('../img/image.png');
     texts[actions.keyboard] = require('../img/keyboard.png');
-    texts[actions.setBold] = require('../img/bold.png');
-    texts[actions.setItalic] = require('../img/italic.png');
+    // texts[actions.setBold] = require('../img/bold.png');
+    // texts[actions.setItalic] = require('../img/italic.png');
     texts[actions.insertBulletsList] = require('../img/ul.png');
     texts[actions.insertOrderedList] = require('../img/ol.png');
     texts[actions.insertLink] = require('../img/link.png');
@@ -92,12 +97,12 @@ export default class RichToolbar extends Component {
     }
 
     static getDerivedStateFromProps(nextProps, prevState) {
-        const {actions} = nextProps;
+        const { actions } = nextProps;
         if (actions !== prevState.actions) {
-            let {selectedItems = []} = prevState;
+            let { selectedItems = [] } = prevState;
             return {
                 actions,
-                data: actions.map((action) => ({action, selected: selectedItems.includes(action)})),
+                data: actions.map((action) => ({ action, selected: selectedItems.includes(action) })),
             };
         }
         return null;
@@ -108,7 +113,7 @@ export default class RichToolbar extends Component {
     }
 
     _mount = () => {
-        const {editor: {current: editor} = {current: this.props?.getEditor()}} = this.props;
+        const { editor: { current: editor } = { current: this.props?.getEditor() } } = this.props;
         if (!editor) {
             throw new Error('Toolbar has no editor!');
         } else {
@@ -118,11 +123,11 @@ export default class RichToolbar extends Component {
     };
 
     setSelectedItems(items) {
-        const {selectedItems} = this.state;
+        const { selectedItems } = this.state;
         if (this.editor && items !== selectedItems) {
             this.setState({
                 items,
-                data: this.state.actions.map((action) => ({action, selected: items.includes(action)})),
+                data: this.state.actions.map((action) => ({ action, selected: items.includes(action) })),
             });
         }
     }
@@ -140,7 +145,7 @@ export default class RichToolbar extends Component {
     }
 
     _getButtonIcon(action) {
-        const {iconMap} = this.props;
+        const { iconMap } = this.props;
         if (iconMap && iconMap[action]) {
             return iconMap[action];
         } else {
@@ -159,7 +164,7 @@ export default class RichToolbar extends Component {
     }
 
     _onPress(action) {
-        const {onPressAddImage, onInsertLink, insertVideo} = this.props;
+        const { onPressAddImage, onInsertLink, insertVideo } = this.props;
         const editor = this.editor;
         if (!editor) return;
 
@@ -168,6 +173,9 @@ export default class RichToolbar extends Component {
                 if (onInsertLink) return onInsertLink();
             case actions.setBold:
             case actions.setItalic:
+            case actions.setColor:
+            case actions.checkDone:
+            case actions.scrollMore:
             case actions.undo:
             case actions.redo:
             case actions.insertBulletsList:
@@ -216,32 +224,32 @@ export default class RichToolbar extends Component {
     _defaultRenderAction(action, selected) {
         let that = this;
         const icon = that._getButtonIcon(action);
-        const {iconSize, iconGap, disabled, itemStyle} = that.props;
+        const { iconSize, iconGap, disabled, itemStyle } = that.props;
         const style = selected ? that._getButtonSelectedStyle() : that._getButtonUnselectedStyle();
         const tintColor = disabled
             ? that.props.disabledIconTint
             : selected
-            ? that.props.selectedIconTint
-            : that.props.iconTint;
+                ? that.props.selectedIconTint
+                : that.props.iconTint;
         return (
             <TouchableOpacity
                 key={action}
                 disabled={disabled}
-                style={[{width: iconGap + iconSize}, styles.item, itemStyle, style]}
+                style={[{ width: iconGap + iconSize }, styles.item, itemStyle, style]}
                 onPress={() => that._onPress(action)}>
                 {icon ? (
                     typeof icon === 'function' ? (
-                        icon({selected, disabled, tintColor, iconSize, iconGap})
+                        icon({ selected, disabled, tintColor, iconSize, iconGap })
                     ) : (
-                        <Image
-                            source={icon}
-                            style={{
-                                tintColor,
-                                height: iconSize,
-                                width: iconSize,
-                            }}
-                        />
-                    )
+                            <Image
+                                source={icon}
+                                style={{
+                                    tintColor,
+                                    height: iconSize,
+                                    width: iconSize,
+                                }}
+                            />
+                        )
                 ) : null}
             </TouchableOpacity>
         );
@@ -254,7 +262,7 @@ export default class RichToolbar extends Component {
     }
 
     render() {
-        const {style, disabled, children, flatContainerStyle} = this.props;
+        const { style, disabled, children, flatContainerStyle } = this.props;
         const vStyle = [styles.barContainer, style, disabled && this._getButtonDisabledStyle()];
         return (
             <View style={vStyle}>
@@ -265,7 +273,7 @@ export default class RichToolbar extends Component {
                     data={this.state.data}
                     alwaysBounceHorizontal={false}
                     showsHorizontalScrollIndicator={false}
-                    renderItem={({item}) => this._renderAction(item.action, item.selected)}
+                    renderItem={({ item }) => this._renderAction(item.action, item.selected)}
                     contentContainerStyle={flatContainerStyle}
                 />
                 {children}
diff --git a/node_modules/react-native-pell-rich-editor/src/const.js b/node_modules/react-native-pell-rich-editor/src/const.js
index 60a72d7..ff6001d 100755
--- a/node_modules/react-native-pell-rich-editor/src/const.js
+++ b/node_modules/react-native-pell-rich-editor/src/const.js
@@ -2,7 +2,9 @@ export const actions = {
     content: 'content',
 
     updateHeight: 'UPDATE_HEIGHT',
-
+    setColor:'color',
+    checkDone: 'checkDone',
+    scrollMore:'scrollMore',
     setBold: 'bold',
     setItalic: 'italic',
     setUnderline: 'underline',
@@ -53,6 +55,7 @@ export const actions = {
     setEditorHeight: 'SET_EDITOR_HEIGHT',
     setFooterHeight: 'SET_FOOTER_HEIGHT',
     setPlatform: 'SET_PLATFORM',
+    
 };
 
 export const messages = {
@@ -69,4 +72,5 @@ export const messages = {
     LINK_TOUCHED: 'LINK_TOUCHED',
     SELECTED_TEXT_CHANGED: 'SELECTED_TEXT_CHANGED',
     OFFSET_HEIGHT: 'OFFSET_HEIGHT',
+    SNAP_FULL: 'SNAP_FULL'
 };
diff --git a/node_modules/react-native-pell-rich-editor/src/editor.js b/node_modules/react-native-pell-rich-editor/src/editor.js
index 11e7729..c6d244a 100644
--- a/node_modules/react-native-pell-rich-editor/src/editor.js
+++ b/node_modules/react-native-pell-rich-editor/src/editor.js
@@ -282,6 +282,18 @@ function createHTML(options = {}) {
                     }
                 }
             },
+            color: { 
+                result: function(color) { 
+                    // var selection = window.getSelection();
+                    // var range = document.createRange();
+                    // range.setStart(anchorNode, 0);
+                    // range.setEnd(focusNode, anchorNode.length);
+                    // selection.addRange(range);
+                    exec('forecolor',color);
+                    // selection.removeAllRanges();
+                    return;  
+                }
+            },
             image: {
                 result: function(url, style) {
                     if (url){
@@ -309,6 +321,14 @@ function createHTML(options = {}) {
                     }
                 }
             },
+            scrollMore: {
+                result: function(offset) {
+                    if(focusNode.parentNode.offsetTop > 240 || anchorOffset > 100) {
+                        document.documentElement.scroll({ top: document.documentElement.scrollTop
+                            + offset, behavior: 'smooth' })
+                    }
+                }
+            },
             checkboxList: {
                 state: function(){return checkboxNode(window.getSelection().anchorNode)},
                 result: function() {
@@ -330,6 +350,17 @@ function createHTML(options = {}) {
                     }
                 }
             },
+            checkDone: {
+                result: function() {
+                    var selection = window.getSelection();
+                    var range = document.createRange();
+                    range.setStart(anchorNode, 0);
+                    range.setEnd(focusNode, anchorNode.length);
+                    selection.addRange(range);
+                    exec('strikeThrough');
+                    selection.removeAllRanges();
+                }
+            },
             content: {
                 setDisable: function(dis){ this.blur(); editor.content.contentEditable = !dis},
                 setHtml: function(html) { editor.content.innerHTML = html; },
@@ -559,4 +590,4 @@ function createHTML(options = {}) {
 }
 
 const HTML = createHTML();
-export {HTML, createHTML, getContentCSS};
+export { HTML, createHTML, getContentCSS };
